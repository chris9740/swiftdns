#!/bin/bash

prefixes=(
    "feat"
    "fix"
    "docs"
    "style"
    "refactor"
    "test"
    "chore"
    "security"
)

RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
LIGHT_GRAY='\033[0;37m'
LIGHT_RED='\033[1;31m'
ITALIC='\033[3m'
COLOR_OFF='\033[0m'

print_error() {
    echo -e "${LIGHT_GRAY}(pre-commit)${COLOR_OFF} ${LIGHT_RED}error${COLOR_OFF}: $1"
}

if ! command -v cargo >/dev/null 2>&1; then
    print_error "cargo is not installed"
    exit 1
fi

validate_commit_messages() {
    for commit_hash in $(git rev-list dev); do
        local commit_hash="${commit_hash:0:7}"
        local commit_message=$(git show -s --format=%s $commit_hash)

        fail() {
            print_error "invalid commit message ($commit_hash): \"${RED}$commit_message${COLOR_OFF}\": $1"
        }

        # We want the upper limit of the commit title length to be 72,
        # because that's the longest it can be without being ellipsied on the website
        if ((${#commit_message} > 72)); then
            fail "message too long (${#commit_message} > 72)"
            exit 1
        fi

        # Matches "0.1.2" and "0.1.2 (#3)" ("#3" is an example PR id)
        if [[ $commit_message =~ ^[0-9]+\.[0-9]+\.[0-9]+( \(#([0-9]+)\))?$ ]]; then
            continue
        fi

        if [[ $commit_message =~ ^"Merge pull request" || $commit_message =~ ^"Merge branch" ]]; then
            continue
        fi

        for prefix in "${prefixes[@]}"; do
            if [[ $commit_message =~ ^$prefix: || $commit_message =~ ^$prefix"(".*")" ]]; then
                continue 2
            fi
        done

        fail "invalid commit message"
        print_error "valid message is either a merge message, or has valid type (e.g. \"${GREEN}fix: ...${COLOR_OFF}\" or \"${GREEN}feat(filter): ...${COLOR_OFF}\")"
        exit 1
    done
}

validate_commit_messages

cargo clippy
cargo test
